# GitLab uses Docker in the background, so it's required to get the image.
# TODO: Define and invoke functions.
# TODO: Run Mozilla Observatory from single command, issue: https://github.com/mozilla/observatory-cli/issues/42.
image: node:10.15.3-alpine

# Cache npm modules and Cypress binary. To point at the folders the paths can be lsited in the "cache" job settings.
variables:
  npm_config_cache: '$CI_PROJECT_DIR/.npm'
  CYPRESS_CACHE_FOLDER: '$CI_PROJECT_DIR/cache/Cypress'

# Cache using branch name.
cache:
  key: $CI_COMMIT_REF_SLUG
  paths:
    - .npm
    - cache/Cypress
    - node_modules/

# Make sure to install all packages before running anything.
before_script:
  - apk update && apk add git # Install Git in the container.
  - npm ci # For CI it's better to have this instead of npm install.

# Define stages which GitLab will go through, order matters.
stages:
  - security
  - quality
  - test
  - build
  - staging
  - security staging
  - production
  - security production

# Define and run known vulnerabilities security job.
Dependencies Scanning:
  # When the commit message will have the keyword 'skip-ci' then don't execute pipelines. Useful for little changes such as README.md, when it's not required to run the whole pipeline on file change.
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-ci/
  stage: security
  script:
    - npx audit-ci --low # Prevent integration with low or higher vulnerabilities, i.e. prevent all vulnerabilities.

# Define and run lint (SAST) security job.
Static Application Security Testing (SAST):
  # When the commit message will have the keyword 'skip-ci' then don't execute pipelines. Useful for little changes such as README.md, when it's not required to run the whole pipeline on file change.
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-ci/
  script:
    - npm run lint
  stage: security

# Define and run formatting code quality job.
Code Quality:
  # When the commit message will have the keyword 'skip-ci' then don't execute pipelines. Useful for little changes such as README.md, when it's not required to run the whole pipeline on file change.
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-ci/
  stage: quality
  script:
    - npm run format:check

# Define and run unit tests job.
Unit Tests:
  # When the commit message will have the keyword 'skip-ci' then don't execute pipelines. Useful for little changes such as README.md, when it's not required to run the whole pipeline on file change.
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-ci/
  #image: juristr/angular-ci-build:1.0.0 # Install Angular CLI.
  script:
    - npm run test --coverage
  stage: test

# Define and run E2E tests job.
E2E Tests:
  artifacts:
    expire_in: 1 day
    paths:
      - dist/out-tsc/apps/ditectrev-e2e/**/*.mp4
      - dist/out-tsc/apps/ditectrev-e2e/**/*.png
    when: always
  # When the commit message will have the keyword 'skip-ci' then don't execute pipelines. Useful for little changes such as README.md, when it's not required to run the whole pipeline on file change.
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-ci/
  image: cypress/base:10
  script:
    - npm run e2e
  stage: test

# Define staging build job. It installs all required modules which are described in package.json and build the arficats which are supposed to be deployed.
Build Staging:
  # Keep the functions folder as an artifact after the app build job will be done.
  artifacts:
    expire_in: 1 day
    paths:
      - functions
    when: always
  script:
    - npm run build:ditectrev:ssr:staging
  # When the commit message will have the keyword 'skip-ci' then don't execute pipelines. Useful for little changes such as README.md, when it's not required to run the whole pipeline on file change.
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-ci/
  stage: build

# Define production build job. It installs all required modules which are described in package.json and build the arficats which are supposed to be deployed.
Build Production:
  # Keep the functions folder as an artifact after the app build job will be done.
  artifacts:
    expire_in: 1 day
    paths:
      - functions
    when: always
  script:
    - npm run build:ditectrev:ssr:production
  # When the commit message will have the keyword 'skip-ci' then don't execute pipelines. Useful for little changes such as README.md, when it's not required to run the whole pipeline on file change.
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-ci/
  stage: build

# Deployment settings for development environment.
Deploy to Staging:
  dependencies:
    - Build Staging
  environment:
    name: development # Deployment stage for development environment.
  # When the commit message will have the keyword 'skip-ci' then don't execute pipelines. Useful for little changes such as README.md, when it's not required to run the whole pipeline on file change.
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-ci/
  only:
    - master # Corresponding only to the master branch (note: should be develop, but the project started in master, so just keep it...).
  script:
    - npm run predeploy
    - npm run deploy:cloud_functions
  stage: staging

# Mozilla Observatory staging security test.
Security Headers Staging:
  # When the commit message will have the keyword 'skip-ci' then don't execute pipelines. Useful for little changes such as README.md, when it's not required to run the whole pipeline on file change.
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-ci/
  script:
    - npm install -g observatory-cli
    - observatory thesisapp-dev.firebaseapp.com --format report --zero
    - observatory thesisapp-dev.firebaseapp.com --min-score 100
  stage: security staging

# Deployment settings for production environment.
Deploy to Production:
  dependencies:
    - Build Production
  environment:
    name: production # Deployment stage for production environment.
  # When the commit message will have the keyword 'skip-ci' then don't execute pipelines. Useful for little changes such as README.md, when it's not required to run the whole pipeline on file change.
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-ci/
  only:
    - master # Corresponding only to the master branch.
  script:
    - npm run predeploy
    - npm run deploy:cloud_functions
  stage: production
  when: manual # Deployment to production has to be explicitly started by a user, thus this job is not exectued automatically.

# Mozilla Observatory production security test.
Security Headers Production:
  # When the commit message will have the keyword 'skip-ci' then don't execute pipelines. Useful for little changes such as README.md, when it's not required to run the whole pipeline on file change.
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-ci/
  script:
    - npm install -g observatory-cli
    - observatory thesisapp-16048.firebaseapp.com --format report --zero
    - observatory thesisapp-16048.firebaseapp.com --min-score 100
  stage: security production
  when: manual # Security Headers can be check once again manually once deployment to production will be done.
