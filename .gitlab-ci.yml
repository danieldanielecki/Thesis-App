# GitLab uses Docker in the background, so it's required to get the image.
# TODO: Define functions.
# TODO: Make builds: build->code quality/SAST/dependenceis->unit tests->e2e->staging->dast->production.
image: node:10.15.3-alpine

# Cache npm modules and Cypress binary. To point at the folders the paths can be lsited in the "cache" job settings.
variables:
  npm_config_cache: '$CI_PROJECT_DIR/.npm'
  CYPRESS_CACHE_FOLDER: '$CI_PROJECT_DIR/cache/Cypress'

# Cache using branch name.
cache:
  key: $CI_COMMIT_REF_SLUG
  paths:
    - .npm
    - cache/Cypress
    - node_modules/

# Make sure to install all packages before running anything.
before_script:
  - npm ci # For CI it's better to have this instead of npm install.

# Define stages which GitLab will go through, order matters.
stages:
  - build
  - test
  - staging
  - production

# Define build job. It installs all required modules which are described in package.json and build the arficats which are supposed to be deployed. Plus it prints some useful environmental variables of the GitLab CI's system.
Build:
  # Keep the dist folder as an artifact after the app-build job will be done.
  artifacts:
    expire_in: 1 day
    paths:
      - functions
    when: always
  script:
    - npm run build:ditectrev:ssr
  # When the commit message will have the keyword 'skip-ci' then don't execute pipelines. Useful for little changes such as README.md, when it's not required to run the whole pipeline on file change.
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-ci/
  stage: build

# Define and run security  tests job.
Dependencies Scanning:
  # When the commit message will have the keyword 'skip-ci' then don't execute pipelines. Useful for little changes such as README.md, when it's not required to run the whole pipeline on file change.
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-ci/
  stage: test
  script:
    - npx audit-ci --low # Prevent integration with low or higher vulnerabilities, i.e. prevent all vulnerabilities.

# Define and run formatting tests job.
Code Quality:
  # When the commit message will have the keyword 'skip-ci' then don't execute pipelines. Useful for little changes such as README.md, when it's not required to run the whole pipeline on file change.
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-ci/
  stage: test
  script:
    - npm run format:check

# Define and run lint (SAST) tests job.
Static Application Security Testing (SAST):
  # When the commit message will have the keyword 'skip-ci' then don't execute pipelines. Useful for little changes such as README.md, when it's not required to run the whole pipeline on file change.
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-ci/
  script:
    - npm run lint
  stage: test

# Define and run unit tests job.
Unit Tests:
  # When the commit message will have the keyword 'skip-ci' then don't execute pipelines. Useful for little changes such as README.md, when it's not required to run the whole pipeline on file change.
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-ci/
  #image: juristr/angular-ci-build:1.0.0 # Install Angular CLI.
  script:
    - npm run test --coverage
  stage: test

# Define and run E2E tests job.
E2E Tests:
  artifacts:
    expire_in: 1 day
    paths:
      - dist/out-tsc/apps/ditectrev-e2e/**/*.mp4
      - dist/out-tsc/apps/ditectrev-e2e/**/*.png
    when: always
  # When the commit message will have the keyword 'skip-ci' then don't execute pipelines. Useful for little changes such as README.md, when it's not required to run the whole pipeline on file change.
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-ci/
  image: cypress/base:10
  script:
    - npm run e2e
  stage: test

# Deployment settings for development environment.
Deploy to Staging:
  dependencies:
    - Build
  environment:
    name: development # Deployment stage for development environment.
  # When the commit message will have the keyword 'skip-ci' then don't execute pipelines. Useful for little changes such as README.md, when it's not required to run the whole pipeline on file change.
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-ci/
  only:
    - master # Corresponding only to the master branch (note: should be develop, but the project started in master, so just keep it...).
  script:
    - npm run predeploy
    - npm run deploy:cloud_functions
  stage: staging

# Deployment settings for production environment.
Deploy to Production:
  dependencies:
    - Build
  environment:
    name: production # Deployment stage for production environment.
  # When the commit message will have the keyword 'skip-ci' then don't execute pipelines. Useful for little changes such as README.md, when it's not required to run the whole pipeline on file change.
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-ci/
  only:
    - master # Corresponding only to the master branch.
  script:
    - npm run predeploy
    - npm run deploy:cloud_functions
  stage: production
  when: manual # Deployment to production has to be explicitly started by a user, thus this job is not exectued automatically.

# TODO: more security tests should be added.
