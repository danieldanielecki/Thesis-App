# Get container with "firebase-tools" pre-installed for deployment (CD) to Firebase Hosting.
image: node:latest

# Make sure to install all packages for each job.
before_script:
  - npm install

# Cache node_modules.
cache:
  paths:
    - node_modules/
  key: '$CI_COMMIT_REF_SLUG' # Enable single cache for all jobs. This one is per-branch caching.

# Define stages.
stages:
  - build
  - test
  - deploy

# Define build job. It installs all required modules which are described in package.json and build the arficats which are supposed to be deployed. Plus it prints some useful environmental variables of the GitLab CI's system.
app-build:
  # Keep the dist/apps/ditectrev folder as an artifact after the define job will be done.
  artifacts:
    paths:
      - dist/apps/ditectrev
  script:
    - echo $CI_BUILD_ID
    - echo $CI_BUILD_REPO
    - echo $CI_COMMIT_SHORT_SHA
    - echo $CI_COMMIT_REF_NAME
    - echo $CI_COMMIT_REF_SLUG
    - echo $CI_COMMIT_TAG
    - echo $CI_ENVIRONMENT_NAME
    - echo $CI_ENVIRONMENT_SLUG
    - echo $CI_JOB_ID
    - echo $CI_JOB_NAME
    - echo $CI_JOB_STAGE
    - echo $CI_JOB_MANUAL
    - echo $CI_JOB_TRIGGERED
    - echo $CI_JOB_TOKEN
    - echo $CI_PIPELINE_ID
    - echo $CI_PIPELINE_IID
    - echo $CI_PAGES_DOMAIN
    - echo $CI_PAGES_URL
    - echo $CI_PROJECT_ID
    - echo $CI_PROJECT_DIR
    - echo $CI_PROJECT_NAME
    - echo $CI_PROJECT_NAMESPACE
    - echo $CI_PROJECT_PATH
    - echo $CI_PROJECT_URL
    - echo $CI_REGISTRY
    - echo $CI_REGISTRY_IMAGE
    - echo $CI_REPOSITORY_URL
    - echo $CI_RUNNER_ID
    - echo $CI_RUNNER_DESCRIPTION
    - echo $CI_RUNNER_TAGS
    - echo $CI_SERVER
    - echo $CI_SERVER_NAME
    - echo $CI_SERVER_REVISION
    - echo $CI_SERVER_VERSION
    - echo $CI_SERVER_VERSION_MAJOR
    - echo $CI_SERVER_VERSION_MINOR
    - echo $CI_SERVER_VERSION_PATCH
    - echo $GITLAB_USER_ID
    - echo $GITLAB_USER_EMAIL
    - echo $CI_REGISTRY_USER
    - echo $CI_REGISTRY_PASSWORD
    - npm run build:ditectrev
  # When the commit message will have the keyword 'skip-ci' then don't execute pipelines. Useful for little changes such as README.md, when it's not required to run the whole pipeline on file change.
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-ci/
  stage: build
  tags:
    - build

# Define and run formatting tests job.
check-formatting:
  stage: test
  script:
    - npm run format:check $(git rev-parse $CI_COMMIT_SHA^5) $CI_COMMIT_SHA
  tags:
    - formatting

# Define and run E2E tests job.
e2e-tests:
  # When the commit message will have the keyword 'skip-ci' then don't execute pipelines. Useful for little changes such as README.md, when it's not required to run the whole pipeline on file change.
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-ci/
  script:
    - npm run e2e
  stage: test
  tags:
    - e2e-tests

# Define and run lint (SAST) tests job.
lint-tests:
  # When the commit message will have the keyword 'skip-ci' then don't execute pipelines. Useful for little changes such as README.md, when it's not required to run the whole pipeline on file change.
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-ci/
  script:
    - npm run lint
  stage: test
  tags:
    - linting

# Define and run unit tests job.
unit-tests:
  # When the commit message will have the keyword 'skip-ci' then don't execute pipelines. Useful for little changes such as README.md, when it's not required to run the whole pipeline on file change.
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-ci/
  script:
    - npm run test
  stage: test
  tags:
    - unit-tests

# Deployment settings for development environment.
deploy-development:
  dependencies:
    - app-build
  environment:
    name: development # Deployment stage for development environment.
  # When the commit message will have the keyword 'skip-ci' then don't execute pipelines. Useful for little changes such as README.md, when it's not required to run the whole pipeline on file change.
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-ci/
  only:
    - master # Corresponding only to the master branch (note: should be develop, but the project started in master, so just keep it...).
  script:
    - npm run deploy
  stage: deploy
  tags:
    - staging

# Deployment settings for production environment.
deploy-production:
  dependencies:
    - app-build
  environment:
    name: production # Deployment stage for production environment.
  only:
    - master # Corresponding only to the master branch.
  script:
    - npm run deploy
  stage: deploy
  tags:
    - production
  when: manual # Deployment to production has to be explicitly started by a user, thus this job is not exectued automatically.
